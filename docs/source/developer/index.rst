Developer Guide
===============

Database Design
---------------

Entity-Relationship Diagram and detailed explanation of each entity are given below:

   .. figure:: images/ERDigaram.png
      :scale: 50 %
      :alt: Entity Relationship Diagram

      Entity Relationship Diagram of Readvice.

There are 6 tables in the database: BOOK, BOOKWORM, REVIEW, AUTHOR, GENRES and ADMINS.

BOOK Table
----------
There are 7 fields available:
- ID: Unique id generated by PostgreSQL
- TITLE: Title of the book, cannot be empty
- AUTHORID: Author of the book, foreign key to AUTHOR table
- YR: Publication year, must be between 0 and 2019
- PGNUM: Number of pages the book has, must be greater than 0
- COVER: A link to cover page of the book
- DESCRIPTION: A summary of the book

BOOKWORM Table
--------------
There are 6 fields available:
- ID: Unique id generated by PostgreSQL
- USERNAME: Username of the user, cannot be empty
- EMAIL: Email address of the user, cannot be empty
- PASSWORD: Password of the user in hashed form, cannot be empty
- PROFILEPICTURE: Name of the profile picture file stored in filesystem
- GENDER: Gender field.

REVIEW Table
------------
There are 6 fields available:
- ID: Unique id generated by PostgreSQL
- SCORE: An integer value between 1 and 10.
- COMMENT: Comment about the book.
- DATEWRITTEN: A time stamp, automatically generated.
- BOOKID: The book that review belongs to, foreign key to BOOK table
- USERID: Owner of the review, foreign key to BOOKWORM table

AUTHOR Table
------------
There are 4 fields available:
- ID: Unique id generated by PostgreSQL
- NAME: Name of the author, cannot be empty
- DESCRIPTION: Information about the author
- PHOTO: A link to the author's photo

GENRES Table
------------
There are 2 fields:
- BOOKID: The book that belongs to this genre, foreign key to BOOK table
- GENRE: Name of the genre

ADMINS Table
------------
A list of admins. Only 1 field available:
- ADMINID: ID of an admin, foreign key to BOOKWORM table

Code
----

Database is initialized using the following queries:

   .. code-block:: python

      INIT_STATEMENTS = [
         "DROP TABLE IF EXISTS REVIEW",
         "DROP TABLE IF EXISTS ADMINS",
         "DROP TABLE IF EXISTS BOOKWORM",
         "DROP TABLE IF EXISTS GENRES",
         "DROP TABLE IF EXISTS BOOK",   
         "DROP TABLE IF EXISTS AUTHOR",
    

         """CREATE TABLE AUTHOR(
            ID SERIAL PRIMARY KEY,
            NAME VARCHAR(50) NOT NULL,
            DESCRIPTION VARCHAR(2000),
            PHOTO VARCHAR(200)
         )""",

         """CREATE TABLE BOOK(
            ID SERIAL PRIMARY KEY,
            TITLE VARCHAR(80) NOT NULL,
            YR INTEGER CHECK(YR>=0 AND YR<=2019),
            AUTHORID INTEGER REFERENCES AUTHOR ON DELETE SET NULL,
            PGNUM INTEGER CHECK(PGNUM>=0),
            COVER VARCHAR(200),
            DESCRIPTION VARCHAR(2000)
         )""",
    
         """CREATE TABLE BOOKWORM(
            ID SERIAL PRIMARY KEY,
            USERNAME VARCHAR(20) UNIQUE NOT NULL,
            PASSWORD VARCHAR(100) NOT NULL,
            EMAIL VARCHAR(50) UNIQUE NOT NULL,
            PROFILEPICTURE VARCHAR(30),
            GENDER VARCHAR(10)
         )""",

         """CREATE TABLE REVIEW(
            ID SERIAL PRIMARY KEY,
            SCORE INTEGER NOT NULL CHECK(SCORE>=1 AND SCORE<=10),
            COMMENT VARCHAR(2000),
            DATEWRITTEN TIMESTAMP,
            BOOKID INTEGER REFERENCES BOOK ON DELETE CASCADE,
            USERID INTEGER REFERENCES BOOKWORM ON DELETE CASCADE
         )""",
    
         """CREATE TABLE ADMINS(
            ADMINID INTEGER UNIQUE REFERENCES BOOKWORM ON DELETE CASCADE
         )""",

         """CREATE TABLE GENRES(
            BOOKID INTEGER REFERENCES BOOK ON DELETE CASCADE,
            GENRE VARCHAR(20)
         )"""
      ]

Initialization functions:
   
   .. code-block:: python

      def initialize(url):
         with dbapi2.connect(url) as connection:
            cursor = connection.cursor()
            for statement in INIT_STATEMENTS:
                  cursor.execute(statement)
            cursor.close()

      if __name__ == "__main__":
         url = os.getenv("DATABASE_URL")
         if url is None:
            print("Usage: DATABASE_URL=url python dbinit.py", file=sys.stderr)
            sys.exit(1)
         initialize(url)

Database is initialized using "DATABASE_URL=url python dbinit.py" command.

Explanation and an example of what each file does is given below:

All the routes are created and the application is initialized in server.py file.

   .. code-block:: python

      app.add_url_rule("/", view_func=views.home_page)

View functions for routes are stored in views.py file.

   .. code-block:: python

      def home_page():
         searchform=SearchForm()
         db = current_app.config["db"]
         books = db.get_top_books()
         return render_template("home.html", books=books, searchform=searchform)

database.py file contains the functions to interact with the database.

   .. code-block:: python

      def get_top_books(self):
         books = []
         with dbapi2.connect(self.db_url) as connection:
            cursor = connection.cursor()
            query = "SELECT BOOK.ID, BOOK.TITLE, BOOK.YR, BOOK.COVER, AVG(REVIEW.SCORE) FROM BOOK INNER JOIN REVIEW ON BOOK.ID = REVIEW.BOOKID GROUP BY BOOK.ID, BOOK.TITLE, BOOK.YR, BOOK.COVER ORDER BY AVG(REVIEW.SCORE) DESC LIMIT 10"
            cursor.execute(query)
            for book_id, title, year, cover, avgscore in cursor:
                books.append(Book(id=book_id, title=title, year=year, cover=cover, avgscore=avgscore))
        return books

forms.py file contains forms created with WTForms package.

   .. code-block:: python

      class SearchForm(FlaskForm):
         query = StringField("Search...", validators=[DataRequired()])

author.py, book.py, review.py and user.py files contain classes for author, book, review and bookworm entities.
   
   .. code-block:: python
      
      class Review:
         def __init__(self, author, book, score=None, comment=None, id=None, datewritten=None):
            self.author = author
            self.book = book
            self.score = score
            self.comment = comment
            self.id = id
            self.datewritten = datewritten

settings.py file contains basic configuration for the applicataion.

